

/*
Lambda 可以在其主体 (在 c + + 14) 中引入新变量，还可以从周围范围访问或 捕获 变量。 Lambda 以捕获子句开头。 它指定捕获的变量以及捕获是通过值还是通过引用来捕获。 具有 "and" 符号 (&) 前缀的变量通过引用访问，不包含它的变量通过值访问。

空 capture 子句 [ ] 指示 lambda 表达式的主体不访问封闭范围中的变量。

您可以使用捕获-默认模式来指示如何捕获 lambda 体中引用的任何外部变量：表示引用的 [&] 所有变量都按引用捕获， [=] 这意味着它们是通过值捕获的。 可以使用默认捕获模式，然后为特定变量显式指定相反的模式。 例如，如果 lambda 体通过引用访问外部变量 total 并通过值访问外部变量 factor，则以下 capture 子句等效：
*/

/*
如果捕获子句包含一个捕获-默认值 & ，则该捕获子句捕获中的任何标识符都不能具有该格式 &identifier 。
同样，如果捕获子句包括捕获默认值 = ，则该捕获子句的捕获不能具有格式 =identifier 。
标识符或 this 在捕获子句中不能出现多次。 下面的代码段演示了一些示例：
*/
struct S { void f(int i); };

void S::f(int i) {
    [&, i] {};      // OK
  //  [&, &i] {};     // 错误：当 &amp; 是默认值时，我以 &amp; 开头
 //   [=, this] {};   // 错误：这当 = 是默认值
    [=, *this] { }; // OK：按值捕获。见下文。 //从C++17开始
 //   [i, i] {};      // 错误：我重复了
}


template<class... Args>
void f(Args... args) {
    auto x = [args...]{ return g(args...); };
    x();
}