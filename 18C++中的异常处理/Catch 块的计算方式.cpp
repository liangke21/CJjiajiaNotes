#include <iostream>
using namespace std;







/*
当引发异常时，它可能由以下类型的 catch 处理程序捕获：

可以接受任何类型的处理程序（使用省略号语法）。

接受与异常对象相同的类型的处理程序;由于它是副本，因此 constvolatile 忽略修饰符。

接受对与异常对象相同的类型的引用的处理程序。

接受对与 constvolatile 异常对象类型相同的类型的引用的处理程序。

接受与异常对象类型相同的基类的处理程序;由于它是副本， const 因此 volatile 忽略修饰符。 catch基类的处理程序不能位于 catch 派生类的处理程序之前。

接受对与异常对象相同的类型的基类的引用的处理程序。

接受对与 const 异常对象相同的类型的基类的引用的处理程序 volatile 。

接受可通过标准指针转换规则将引发的指针对象转换为的指针的处理程序。

catch处理程序的显示顺序非常重要，因为给定块的处理程序 try 按其外观的顺序进行检查。 例如，将基类的处理程序放置在派生类的处理程序的前面是错误的。 找到匹配的 catch 处理程序后，不会检查后续处理程序。 因此，省略号 catch 处理程序必须是其块的最后一个处理程序 try 。 例如：
*/

//int main() {
//
//    // ...
//    try
//    {
//        // ...
//    }
//    catch (...)
//    {
//        //在这里处理异常。
//    }
//    // 错误：从不检查接下来的两个处理程序。
//    catch (const char* str)
//    {
//        cout << "Caught exception: " << str << endl;
//    }
//    catch (CExcptClass E)
//    {
//        //在这里处理 CExcpt 类异常。
//    }
//
//
//    return 0;
//}